{"remainingRequest":"/home/node/src/vue-skills/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/node/src/vue-skills/src/components/EpisodeTimer.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/home/node/src/vue-skills/src/components/EpisodeTimer.vue","mtime":1553237002000},{"path":"/home/node/src/vue-skills/node_modules/css-loader/index.js","mtime":1552946783000},{"path":"/home/node/src/vue-skills/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1552946783000},{"path":"/home/node/src/vue-skills/node_modules/postcss-loader/src/index.js","mtime":1552946783000},{"path":"/home/node/src/vue-skills/node_modules/cache-loader/dist/cjs.js","mtime":1552946782000},{"path":"/home/node/src/vue-skills/node_modules/vue-loader/lib/index.js","mtime":1552946783000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.ctl-btn {\n    margin-right: 0.5em;\n    margin-left: 0.5em;\n}\n\n",{"version":3,"sources":["EpisodeTimer.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwCA;AACA;AACA;AACA","file":"EpisodeTimer.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <div class=\"container\">\n        <div style=\"margin-top: 4em\"></div>\n        \n        <!-- Episode Record Start / Stop Buttons -->\n        <div class=\"container has-text-centered\" style=\"margin-bottom: 2em\">\n            <button class=\"button is-medium is-link\"                     v-if=\"! is_recording\" :disabled=\"! is_global_timer_running\" v-on:click=\"startEpisodeRecording()\">Record Episode</button>\n            <button class=\"button is-medium is-danger has-text-centered\" v-if=\"is_recording\"   :disabled=\"is_paused\"                 v-on:click=\"stopEpisodeRecording()\" >Complete Episode</button>\n        </div>\n\n        <!-- Timer Display -->\n        <div class=\"container has-text-centered\" style=\"margin-bottom: 2em\">\n            <span class=\"is-size-1\" id=\"time\" v-html=\"time\"></span>\n        </div>\n        \n        <!-- Control Buttons For Episode Timer -->\n        <div class=\"container has-text-centered\" style=\"margin-bottom: 2em\">\n            <button class=\"button ctl-btn is-medium is-info\"    v-on:click=\"sendFlag()\"      :disabled=\"is_paused || ! is_recording\" ><i class=\"fas fa-flag\"></i></button>\n            <button class=\"button ctl-btn is-medium is-info\"    v-on:click=\"promptComment()\" :disabled=\"is_paused || ! is_recording\" ><i class=\"fas fa-comment\"></i></button>\n\n            <button class=\"button ctl-btn is-medium is-info\"    v-on:click=\"sendPause()\"     :disabled=\"! is_recording\"  v-if=\"! is_paused\" ><i class=\"fas fa-pause\"></i></button>\n            <button class=\"button ctl-btn is-medium is-warning\" v-on:click=\"sendPlay()\"                                  v-if=\"is_paused\"   ><i class=\"fas fa-play\"></i></button>\n\n            <button class=\"button ctl-btn is-medium is-danger\" v-on:click=\"removeEpisode()\"  :disabled=\"! is_recording || is_paused\"><i class=\"fas fa-ban\"></i></button>\n        </div>\n\n        <!-- Comment Section -->\n        <div class=\"container\" v-if=\"want_comment\" style=\"margin-bottom: 2em\">\n            <input type=\"text\" ref='comment_content' v-model=\"comment_content\" autofocus=true class=\"input\" placeholder=\"Enter Comment\" v-on:keyup.enter=\"submitComment()\" />\n        </div>\n        \n        <!-- Delete Confirmation -->\n        <div class=\"container\" v-if=\"want_delete_episode\" style=\"margin-bottom: 2em\">\n            <input type=\"text\" ref='delete_episode' v-model=\"delete_episode\" autofocus=true class=\"input\" placeholder=\"Type 'delete' to confirm episode deletion\" v-on:keyup.enter=\"submitEpisodeDelete()\" />\n        </div>\n        \n    </div>\n</template>\n\n<style>\n    .ctl-btn {\n        margin-right: 0.5em;\n        margin-left: 0.5em;\n    }\n    \n</style>\n\n<script>\n    \n    import { EventBus } from './EventBus.js';\n\n    export default {\n        data: function() {\n            return {\n                state: \"paused\",\n                startTime: Date.now(),\n                currentTime: Date.now(),\n                interval: null,\n                is_paused: false,\n                is_recording: false,\n                episode_number: 1,\n                want_delete_episode: false,\n                want_comment: false,\n                comment_time: null,\n                comment_content: null,\n                delete_episode: null,\n                is_global_timer_running: false,\n                pause_time: null\n            }\n        },\n        mounted: function() {\n\n            this.interval = setInterval(this.updateCurrentTime, 1000);\n            \n            EventBus.$on('GlobalSessionRecordingState', value => {\n                this.$data.is_global_timer_running = value;\n            });\n\n            EventBus.$on('EpisodeRecordingState', value => {\n                this.$data.is_recording = value;\n            });\n\n        },\n        destroyed: function() {\n            clearInterval(this.interval)\n        },\n        computed: {\n            episode_name: function () {\n                return 'Episode ' + ( this.$data.episode_number >= 10 ? this.$data.episode_number : '0' + this.$data.episode_number.toString() );\n            },\n            time: function() {\n                return this.hours + ':' + this.minutes + ':' + this.seconds;\n            },\n            milliseconds: function() {\n                return this.currentTime - this.$data.startTime;\n            },\n            hours: function() {\n                var lapsed = this.milliseconds;\n                var hrs = Math.floor((lapsed / 1000 / 60 / 60));\n                return hrs >= 10 ? hrs : '0' + hrs;\n            },\n            minutes: function() {\n                var lapsed = this.milliseconds;\n                var min = Math.floor((lapsed / 1000 / 60) % 60);\n                return min >= 10 ? min : '0' + min;\n            },\n            seconds: function() {\n                var lapsed = this.milliseconds;\n                var sec = Math.ceil((lapsed / 1000) % 60);\n                return sec >= 10 ? sec : '0' + sec;\n            },\n            ms: function() {\n                return this.milliseconds.toString().substr(-3,1);\n            }\n            \n        },\n        methods: {\n            startEpisodeRecording: function () {\n                this.reset();\n                EventBus.$emit('EpisodeRecordingState', true );\n                EventBus.$emit('episodeNameChange', this.episode_name);\n                EventBus.$emit('addNote', { content: 'BEGIN EPISODE', episodeSessionTimer: '00:00:00' } );\n            },\n            stopEpisodeRecording: function() {\n                this.pause();\n                this.$data.episode_number += 1;\n                EventBus.$emit('EpisodeRecordingState', false );\n                EventBus.$emit('addNote', 'END EPISODE' );\n                EventBus.$emit('EpisodeRecordingState', false );\n            },\n            submitComment: function () {\n                EventBus.$emit('addNote', { content: this.$data.comment_content, episodeSessionTimer: this.$data.comment_time } );\n                this.$data.want_comment = false;\n                this.$data.comment_content = null;\n                this.$data.comment_time = null;\n            },\n            submitEpisodeDelete: function () {\n                if ( this.$data.delete_episode === 'delete' ) {\n                    this.reset();\n                    this.pause();\n                    EventBus.$emit('deleteEpisodeFromLog', this.episode_name );\n                } \n                this.$data.want_delete_episode = false;\n                this.$data.delete_episode = null;\n                EventBus.$emit('EpisodeRecordingState', false );\n            },\n            removeEpisode: function () {\n                this.$data.want_delete_episode = true;\n                this.$nextTick( () => this.$refs.delete_episode.focus() );\n            },\n            \n            reset: function() {\n                this.$data.state = \"started\";\n                this.$data.startTime = Date.now();\n                this.$data.currentTime = Date.now();\n            },\n            pause: function() {\n                this.$data.state = \"paused\";\n            },\n            resume: function() {\n                this.$data.state = \"started\";\n            },\n            updateCurrentTime: function() {\n                if (this.$data.state === \"started\") {\n                    this.currentTime = Date.now();\n                    EventBus.$emit('episodeTimeChange', this.time );\n                }\n            },\n            beginRecording: function() {\n                this.reset();\n                this.$data.is_recording = true;\n                EventBus.$emit('addNote', 'Began recording episode ' + this.$data.episode_name );\n                this.reset();\n            },\n            finishRecording: function() {\n                this.$data.is_recording = false;\n                EventBus.$emit('addNote', 'Finished recording episode ' + this.$data.episode_name );\n                EventBus.$emit('episodeTimeChange', null );\n                this.pause();\n            },\n            sendFlag: function() {\n                EventBus.$emit('addNote', \"FLAG\" );\n            },\n            sendPause: function() {\n                this.$data.is_paused = true;\n                this.$data.state = \"paused\";\n                this.$data.pause_time = Date.now();\n                EventBus.$emit('addNote', 'PAUSE EPISODE' );\n            },\n            sendPlay: function() {\n                this.$data.is_paused = false;\n                EventBus.$emit('addNote', 'RESUME EPISODE' );\n                this.$data.startTime += ( Date.now() - this.$data.pause_time );\n                this.$data.state = \"started\";\n            },\n            promptComment: function() {\n                this.$data.comment_time = this.time;\n                this.$data.want_comment = true;\n                this.$nextTick( () => this.$refs.comment_content.focus() );\n            },\n            setComment: function() {\n                EventBus.$emit('addNote', { note: this.$data.comment_content, episode_time: this.$data.comment_time } );\n                this.$data.want_comment = false;\n                this.$data.comment_content = null;\n                this.$data.comment_time = null;\n            }\n        }\n    } \n</script>\n"]}]}