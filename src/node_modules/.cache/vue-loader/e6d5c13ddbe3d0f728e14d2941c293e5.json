{"remainingRequest":"/home/node/src/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/node/src/src/components/NoteLogger.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/node/src/src/components/NoteLogger.vue","mtime":1553217080000},{"path":"/home/node/src/node_modules/cache-loader/dist/cjs.js","mtime":1552946782000},{"path":"/home/node/src/node_modules/babel-loader/lib/index.js","mtime":1552946771000},{"path":"/home/node/src/node_modules/cache-loader/dist/cjs.js","mtime":1552946782000},{"path":"/home/node/src/node_modules/vue-loader/lib/index.js","mtime":1552946783000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { EventBus } from './EventBus.js';\n\nexport default {\n    name: 'NoteLogger',\n    mounted: function() {\n        EventBus.$on('addNote', note => {\n            this.addNote(note);\n        });\n        EventBus.$on('deleteEpisodeFromLog', episode_name => {\n            this.deleteEpisodeFromLog( episode_name );\n        });\n        EventBus.$on('globalTimeChange', time => {\n            this.$data.currentGlobalSessionTimer = time;\n        });\n        EventBus.$on('episodeTimeChange', time => {\n            this.$data.currentEpisodeSessionTimer = time;\n        });\n        EventBus.$on('episodeNameChange', name => {\n            this.$data.currentEpisodeName = name;\n        });\n    },\n    data: function() {\n        return {\n            items: [ { date: this.getDate(), note : 'Log Started' } ],\n            currentGlobalSessionTimer: false,\n            currentEpisodeName: null,\n        }\n    },\n    methods: {\n        addNote: function(note) {\n            var index = 1;\n            if ( this.$data.items.length >= 1 ) {\n                index = this.$data.items[this.$data.items.length - 1].index;\n            }\n\n            if ( typeof(note) === 'string' ) {\n                this.$data.items.push({ \n                    index:               index,\n                    episode:             this.$data.currentEpisodeName,\n                    date:                this.getDate(), \n                    globalSessionTimer:  this.$data.currentGlobalSessionTimer, \n                    episodeSessionTimer: this.$data.currentEpisodeSessionTimer, \n                    note:                note \n                });\n            } else {\n                this.$data.items.push({ \n                    index:               index,\n                    date:                this.getDate(), \n                    episode:             this.$data.currentEpisodeName,\n                    globalSessionTimer:  this.$data.currentGlobalSessionTimer, \n                    episodeSessionTimer: note.episodeSessionTimer ? note.episodeSessionTimer : this.$data.currentEpisodeSessionTimer, \n                    note:                note.content\n                });\n            }\n        },\n        deleteEpisodeFromLog: function (episode_name) {\n            for (var i = this.$data.items.length - 1; i >= 0 ; i-- ) {\n                if ( this.$data.items[i].episode === episode_name ) {\n                    this.$data.items.splice(i, 1);\n                }\n            }\n        },\n        getDate: function () {\n            var dateObj = new Date;\n            return (\n                ( '0' + (dateObj.getMonth() + 1) ).slice(-2)) + \"/\" + \n                ( '0' + dateObj.getDate()).slice(-2)          + \"/\" +  \n                ( dateObj.getYear() + 1900 )                  + \" \" + \n                ( '0' + dateObj.getHours()).slice(-2)         + \":\" + \n                ( '0' + dateObj.getMinutes()).slice(-2)       + \":\" + \n                ( '0' + dateObj.getSeconds()).slice(-2)       + \".\" + \n                ( '00' + dateObj.getMilliseconds()).slice(-3)\n        }\n    }\n}\n",{"version":3,"sources":["NoteLogger.vue"],"names":[],"mappings":";;;;;;;;;;;AAWA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"NoteLogger.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <div class=\"container\">\n        <div class=\"box is-family-monospace\">\n            <ul>\n                <li v-bind:key=item.index v-for=\"item in items\"> {{item.date }} {{ item.globalSessionTimer || 'xx:xx:xx' }} {{ item.episodeSessionTimer || 'xx.xx.xx' }} {{ item.episode || 'Episode --' }} : {{ item.note }}</li>\n            </ul>\n        </div>\n    </div>\n</template>\n\n<script>\n    import { EventBus } from './EventBus.js';\n\n    export default {\n        name: 'NoteLogger',\n        mounted: function() {\n            EventBus.$on('addNote', note => {\n                this.addNote(note);\n            });\n            EventBus.$on('deleteEpisodeFromLog', episode_name => {\n                this.deleteEpisodeFromLog( episode_name );\n            });\n            EventBus.$on('globalTimeChange', time => {\n                this.$data.currentGlobalSessionTimer = time;\n            });\n            EventBus.$on('episodeTimeChange', time => {\n                this.$data.currentEpisodeSessionTimer = time;\n            });\n            EventBus.$on('episodeNameChange', name => {\n                this.$data.currentEpisodeName = name;\n            });\n        },\n        data: function() {\n            return {\n                items: [ { date: this.getDate(), note : 'Log Started' } ],\n                currentGlobalSessionTimer: false,\n                currentEpisodeName: null,\n            }\n        },\n        methods: {\n            addNote: function(note) {\n                var index = 1;\n                if ( this.$data.items.length >= 1 ) {\n                    index = this.$data.items[this.$data.items.length - 1].index;\n                }\n\n                if ( typeof(note) === 'string' ) {\n                    this.$data.items.push({ \n                        index:               index,\n                        episode:             this.$data.currentEpisodeName,\n                        date:                this.getDate(), \n                        globalSessionTimer:  this.$data.currentGlobalSessionTimer, \n                        episodeSessionTimer: this.$data.currentEpisodeSessionTimer, \n                        note:                note \n                    });\n                } else {\n                    this.$data.items.push({ \n                        index:               index,\n                        date:                this.getDate(), \n                        episode:             this.$data.currentEpisodeName,\n                        globalSessionTimer:  this.$data.currentGlobalSessionTimer, \n                        episodeSessionTimer: note.episodeSessionTimer ? note.episodeSessionTimer : this.$data.currentEpisodeSessionTimer, \n                        note:                note.content\n                    });\n                }\n            },\n            deleteEpisodeFromLog: function (episode_name) {\n                for (var i = this.$data.items.length - 1; i >= 0 ; i-- ) {\n                    if ( this.$data.items[i].episode === episode_name ) {\n                        this.$data.items.splice(i, 1);\n                    }\n                }\n            },\n            getDate: function () {\n                var dateObj = new Date;\n                return (\n                    ( '0' + (dateObj.getMonth() + 1) ).slice(-2)) + \"/\" + \n                    ( '0' + dateObj.getDate()).slice(-2)          + \"/\" +  \n                    ( dateObj.getYear() + 1900 )                  + \" \" + \n                    ( '0' + dateObj.getHours()).slice(-2)         + \":\" + \n                    ( '0' + dateObj.getMinutes()).slice(-2)       + \":\" + \n                    ( '0' + dateObj.getSeconds()).slice(-2)       + \".\" + \n                    ( '00' + dateObj.getMilliseconds()).slice(-3)\n            }\n        }\n    }\n</script>\n\n<style>\n</style>\n"]}]}