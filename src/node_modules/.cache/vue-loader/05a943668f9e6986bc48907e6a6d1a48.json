{"remainingRequest":"/home/node/src/vue-skills/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/node/src/vue-skills/src/components/StopWatch.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/node/src/vue-skills/src/components/StopWatch.vue","mtime":1553218627000},{"path":"/home/node/src/vue-skills/node_modules/cache-loader/dist/cjs.js","mtime":1552946782000},{"path":"/home/node/src/vue-skills/node_modules/babel-loader/lib/index.js","mtime":1552946771000},{"path":"/home/node/src/vue-skills/node_modules/cache-loader/dist/cjs.js","mtime":1552946782000},{"path":"/home/node/src/vue-skills/node_modules/vue-loader/lib/index.js","mtime":1552946783000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\nimport { EventBus } from './EventBus.js';\n\nexport default {\n    data: function() {\n        return {\n            state: \"paused\",\n            startTime: Date.now(),\n            currentTime: Date.now(),\n            interval: null,\n            is_episode_timer_running: false\n        }\n    },\n    mounted: function() {\n        this.interval = setInterval(this.updateCurrentTime, 100);\n        EventBus.$on('EpisodeRecordingState', value => {\n            this.$data.is_episode_timer_running = value;\n        });\n    },\n    destroyed: function() {\n        clearInterval(this.interval)\n    },\n    computed: {\n        time: function() {\n            return this.hours + ':' + this.minutes + ':' + this.seconds;\n        },\n        milliseconds: function() {\n            return this.currentTime - this.$data.startTime;\n        },\n        hours: function() {\n            var lapsed = this.milliseconds;\n            var hrs = Math.floor((lapsed / 1000 / 60 / 60));\n            return hrs >= 10 ? hrs : '0' + hrs;\n        },\n        minutes: function() {\n            var lapsed = this.milliseconds;\n            var min = Math.floor((lapsed / 1000 / 60) % 60);\n            return min >= 10 ? min : '0' + min;\n        },\n        seconds: function() {\n            var lapsed = this.milliseconds;\n            var sec = Math.ceil((lapsed / 1000) % 60);\n            return sec >= 10 ? sec : '0' + sec;\n        }\n    },\n    methods: {\n        startGlobalSession: function () {\n            this.reset();\n            EventBus.$emit('addNote', 'Global Session Has Started' );\n            EventBus.$emit('GlobalSessionRecordingState', true );\n        },\n        stopGlobalSession: function () {\n            this.pause();\n            EventBus.$emit('addNote', 'Global Session Has Stopped' );\n            EventBus.$emit('GlobalSessionRecordingState', false );\n        },\n        reset: function() {\n            this.$data.state = \"started\";\n            this.$data.startTime = Date.now();\n            this.$data.currentTime = Date.now();\n        },\n        pause: function() {\n            this.$data.state = \"paused\";\n        },\n        resume: function() {\n            this.$data.state = \"started\";\n        },\n        updateCurrentTime: function() {\n            if (this.$data.state == \"started\") {\n                this.currentTime = Date.now();\n                EventBus.$emit('globalTimeChange', this.time );\n            }\n        }\n    }\n} \n",{"version":3,"sources":["StopWatch.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAqBA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"StopWatch.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <div class=\"container level\">\n        <div class=\"level-item\">\n            <button v-if=\"$data.state === 'paused'\"  class=\"button is-large is-link\" v-on:click=\"startGlobalSession()\">Begin Recording Session</button>\n            <button v-if=\"$data.state === 'started'\" :disabled=\"is_episode_timer_running\" class=\"button is-large is-danger\" v-on:click=\"stopGlobalSession()\">Stop Recording Session</button>\n        </div>\n        <div class=\"level-item\">\n            <h1 class=\"title is-size-1\">Happy Birthday!</h1>\n        </div>\n        <div class=\"level-item\">\n            <span class=\"is-size-1\" id=\"time\" v-html=\"time\"></span>\n        </div>\n    </div>\n</template>\n\n<style>\n    \n</style>\n\n<script>\n    \n    import { EventBus } from './EventBus.js';\n\n    export default {\n        data: function() {\n            return {\n                state: \"paused\",\n                startTime: Date.now(),\n                currentTime: Date.now(),\n                interval: null,\n                is_episode_timer_running: false\n            }\n        },\n        mounted: function() {\n            this.interval = setInterval(this.updateCurrentTime, 100);\n            EventBus.$on('EpisodeRecordingState', value => {\n                this.$data.is_episode_timer_running = value;\n            });\n        },\n        destroyed: function() {\n            clearInterval(this.interval)\n        },\n        computed: {\n            time: function() {\n                return this.hours + ':' + this.minutes + ':' + this.seconds;\n            },\n            milliseconds: function() {\n                return this.currentTime - this.$data.startTime;\n            },\n            hours: function() {\n                var lapsed = this.milliseconds;\n                var hrs = Math.floor((lapsed / 1000 / 60 / 60));\n                return hrs >= 10 ? hrs : '0' + hrs;\n            },\n            minutes: function() {\n                var lapsed = this.milliseconds;\n                var min = Math.floor((lapsed / 1000 / 60) % 60);\n                return min >= 10 ? min : '0' + min;\n            },\n            seconds: function() {\n                var lapsed = this.milliseconds;\n                var sec = Math.ceil((lapsed / 1000) % 60);\n                return sec >= 10 ? sec : '0' + sec;\n            }\n        },\n        methods: {\n            startGlobalSession: function () {\n                this.reset();\n                EventBus.$emit('addNote', 'Global Session Has Started' );\n                EventBus.$emit('GlobalSessionRecordingState', true );\n            },\n            stopGlobalSession: function () {\n                this.pause();\n                EventBus.$emit('addNote', 'Global Session Has Stopped' );\n                EventBus.$emit('GlobalSessionRecordingState', false );\n            },\n            reset: function() {\n                this.$data.state = \"started\";\n                this.$data.startTime = Date.now();\n                this.$data.currentTime = Date.now();\n            },\n            pause: function() {\n                this.$data.state = \"paused\";\n            },\n            resume: function() {\n                this.$data.state = \"started\";\n            },\n            updateCurrentTime: function() {\n                if (this.$data.state == \"started\") {\n                    this.currentTime = Date.now();\n                    EventBus.$emit('globalTimeChange', this.time );\n                }\n            }\n        }\n    } \n</script>\n"]}]}