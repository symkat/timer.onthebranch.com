{"remainingRequest":"/home/node/src/vue-skills/node_modules/babel-loader/lib/index.js!/home/node/src/vue-skills/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/node/src/vue-skills/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/node/src/vue-skills/src/components/EpisodeTimer.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/node/src/vue-skills/src/components/EpisodeTimer.vue","mtime":1553237002000},{"path":"/home/node/src/vue-skills/node_modules/cache-loader/dist/cjs.js","mtime":1552946782000},{"path":"/home/node/src/vue-skills/node_modules/babel-loader/lib/index.js","mtime":1552946771000},{"path":"/home/node/src/vue-skills/node_modules/cache-loader/dist/cjs.js","mtime":1552946782000},{"path":"/home/node/src/vue-skills/node_modules/vue-loader/lib/index.js","mtime":1552946783000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.to-string\";\nimport _Date$now from \"/home/node/src/vue-skills/node_modules/@babel/runtime-corejs2/core-js/date/now\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { EventBus } from './EventBus.js';\nexport default {\n  data: function data() {\n    return {\n      state: \"paused\",\n      startTime: _Date$now(),\n      currentTime: _Date$now(),\n      interval: null,\n      is_paused: false,\n      is_recording: false,\n      episode_number: 1,\n      want_delete_episode: false,\n      want_comment: false,\n      comment_time: null,\n      comment_content: null,\n      delete_episode: null,\n      is_global_timer_running: false,\n      pause_time: null\n    };\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    this.interval = setInterval(this.updateCurrentTime, 1000);\n    EventBus.$on('GlobalSessionRecordingState', function (value) {\n      _this.$data.is_global_timer_running = value;\n    });\n    EventBus.$on('EpisodeRecordingState', function (value) {\n      _this.$data.is_recording = value;\n    });\n  },\n  destroyed: function destroyed() {\n    clearInterval(this.interval);\n  },\n  computed: {\n    episode_name: function episode_name() {\n      return 'Episode ' + (this.$data.episode_number >= 10 ? this.$data.episode_number : '0' + this.$data.episode_number.toString());\n    },\n    time: function time() {\n      return this.hours + ':' + this.minutes + ':' + this.seconds;\n    },\n    milliseconds: function milliseconds() {\n      return this.currentTime - this.$data.startTime;\n    },\n    hours: function hours() {\n      var lapsed = this.milliseconds;\n      var hrs = Math.floor(lapsed / 1000 / 60 / 60);\n      return hrs >= 10 ? hrs : '0' + hrs;\n    },\n    minutes: function minutes() {\n      var lapsed = this.milliseconds;\n      var min = Math.floor(lapsed / 1000 / 60 % 60);\n      return min >= 10 ? min : '0' + min;\n    },\n    seconds: function seconds() {\n      var lapsed = this.milliseconds;\n      var sec = Math.ceil(lapsed / 1000 % 60);\n      return sec >= 10 ? sec : '0' + sec;\n    },\n    ms: function ms() {\n      return this.milliseconds.toString().substr(-3, 1);\n    }\n  },\n  methods: {\n    startEpisodeRecording: function startEpisodeRecording() {\n      this.reset();\n      EventBus.$emit('EpisodeRecordingState', true);\n      EventBus.$emit('episodeNameChange', this.episode_name);\n      EventBus.$emit('addNote', {\n        content: 'BEGIN EPISODE',\n        episodeSessionTimer: '00:00:00'\n      });\n    },\n    stopEpisodeRecording: function stopEpisodeRecording() {\n      this.pause();\n      this.$data.episode_number += 1;\n      EventBus.$emit('EpisodeRecordingState', false);\n      EventBus.$emit('addNote', 'END EPISODE');\n      EventBus.$emit('EpisodeRecordingState', false);\n    },\n    submitComment: function submitComment() {\n      EventBus.$emit('addNote', {\n        content: this.$data.comment_content,\n        episodeSessionTimer: this.$data.comment_time\n      });\n      this.$data.want_comment = false;\n      this.$data.comment_content = null;\n      this.$data.comment_time = null;\n    },\n    submitEpisodeDelete: function submitEpisodeDelete() {\n      if (this.$data.delete_episode === 'delete') {\n        this.reset();\n        this.pause();\n        EventBus.$emit('deleteEpisodeFromLog', this.episode_name);\n      }\n\n      this.$data.want_delete_episode = false;\n      this.$data.delete_episode = null;\n      EventBus.$emit('EpisodeRecordingState', false);\n    },\n    removeEpisode: function removeEpisode() {\n      var _this2 = this;\n\n      this.$data.want_delete_episode = true;\n      this.$nextTick(function () {\n        return _this2.$refs.delete_episode.focus();\n      });\n    },\n    reset: function reset() {\n      this.$data.state = \"started\";\n      this.$data.startTime = _Date$now();\n      this.$data.currentTime = _Date$now();\n    },\n    pause: function pause() {\n      this.$data.state = \"paused\";\n    },\n    resume: function resume() {\n      this.$data.state = \"started\";\n    },\n    updateCurrentTime: function updateCurrentTime() {\n      if (this.$data.state === \"started\") {\n        this.currentTime = _Date$now();\n        EventBus.$emit('episodeTimeChange', this.time);\n      }\n    },\n    beginRecording: function beginRecording() {\n      this.reset();\n      this.$data.is_recording = true;\n      EventBus.$emit('addNote', 'Began recording episode ' + this.$data.episode_name);\n      this.reset();\n    },\n    finishRecording: function finishRecording() {\n      this.$data.is_recording = false;\n      EventBus.$emit('addNote', 'Finished recording episode ' + this.$data.episode_name);\n      EventBus.$emit('episodeTimeChange', null);\n      this.pause();\n    },\n    sendFlag: function sendFlag() {\n      EventBus.$emit('addNote', \"FLAG\");\n    },\n    sendPause: function sendPause() {\n      this.$data.is_paused = true;\n      this.$data.state = \"paused\";\n      this.$data.pause_time = _Date$now();\n      EventBus.$emit('addNote', 'PAUSE EPISODE');\n    },\n    sendPlay: function sendPlay() {\n      this.$data.is_paused = false;\n      EventBus.$emit('addNote', 'RESUME EPISODE');\n      this.$data.startTime += _Date$now() - this.$data.pause_time;\n      this.$data.state = \"started\";\n    },\n    promptComment: function promptComment() {\n      var _this3 = this;\n\n      this.$data.comment_time = this.time;\n      this.$data.want_comment = true;\n      this.$nextTick(function () {\n        return _this3.$refs.comment_content.focus();\n      });\n    },\n    setComment: function setComment() {\n      EventBus.$emit('addNote', {\n        note: this.$data.comment_content,\n        episode_time: this.$data.comment_time\n      });\n      this.$data.want_comment = false;\n      this.$data.comment_content = null;\n      this.$data.comment_time = null;\n    }\n  }\n};",{"version":3,"sources":["EpisodeTimer.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiDA,SAAA,QAAA,QAAA,eAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,gBAAA;AACA,WAAA;AACA,MAAA,KAAA,EAAA,QADA;AAEA,MAAA,SAAA,EAAA,WAFA;AAGA,MAAA,WAAA,EAAA,WAHA;AAIA,MAAA,QAAA,EAAA,IAJA;AAKA,MAAA,SAAA,EAAA,KALA;AAMA,MAAA,YAAA,EAAA,KANA;AAOA,MAAA,cAAA,EAAA,CAPA;AAQA,MAAA,mBAAA,EAAA,KARA;AASA,MAAA,YAAA,EAAA,KATA;AAUA,MAAA,YAAA,EAAA,IAVA;AAWA,MAAA,eAAA,EAAA,IAXA;AAYA,MAAA,cAAA,EAAA,IAZA;AAaA,MAAA,uBAAA,EAAA,KAbA;AAcA,MAAA,UAAA,EAAA;AAdA,KAAA;AAgBA,GAlBA;AAmBA,EAAA,OAAA,EAAA,mBAAA;AAAA;;AAEA,SAAA,QAAA,GAAA,WAAA,CAAA,KAAA,iBAAA,EAAA,IAAA,CAAA;AAEA,IAAA,QAAA,CAAA,GAAA,CAAA,6BAAA,EAAA,UAAA,KAAA,EAAA;AACA,MAAA,KAAA,CAAA,KAAA,CAAA,uBAAA,GAAA,KAAA;AACA,KAFA;AAIA,IAAA,QAAA,CAAA,GAAA,CAAA,uBAAA,EAAA,UAAA,KAAA,EAAA;AACA,MAAA,KAAA,CAAA,KAAA,CAAA,YAAA,GAAA,KAAA;AACA,KAFA;AAIA,GA/BA;AAgCA,EAAA,SAAA,EAAA,qBAAA;AACA,IAAA,aAAA,CAAA,KAAA,QAAA,CAAA;AACA,GAlCA;AAmCA,EAAA,QAAA,EAAA;AACA,IAAA,YAAA,EAAA,wBAAA;AACA,aAAA,cAAA,KAAA,KAAA,CAAA,cAAA,IAAA,EAAA,GAAA,KAAA,KAAA,CAAA,cAAA,GAAA,MAAA,KAAA,KAAA,CAAA,cAAA,CAAA,QAAA,EAAA,CAAA;AACA,KAHA;AAIA,IAAA,IAAA,EAAA,gBAAA;AACA,aAAA,KAAA,KAAA,GAAA,GAAA,GAAA,KAAA,OAAA,GAAA,GAAA,GAAA,KAAA,OAAA;AACA,KANA;AAOA,IAAA,YAAA,EAAA,wBAAA;AACA,aAAA,KAAA,WAAA,GAAA,KAAA,KAAA,CAAA,SAAA;AACA,KATA;AAUA,IAAA,KAAA,EAAA,iBAAA;AACA,UAAA,MAAA,GAAA,KAAA,YAAA;AACA,UAAA,GAAA,GAAA,IAAA,CAAA,KAAA,CAAA,MAAA,GAAA,IAAA,GAAA,EAAA,GAAA,EAAA,CAAA;AACA,aAAA,GAAA,IAAA,EAAA,GAAA,GAAA,GAAA,MAAA,GAAA;AACA,KAdA;AAeA,IAAA,OAAA,EAAA,mBAAA;AACA,UAAA,MAAA,GAAA,KAAA,YAAA;AACA,UAAA,GAAA,GAAA,IAAA,CAAA,KAAA,CAAA,MAAA,GAAA,IAAA,GAAA,EAAA,GAAA,EAAA,CAAA;AACA,aAAA,GAAA,IAAA,EAAA,GAAA,GAAA,GAAA,MAAA,GAAA;AACA,KAnBA;AAoBA,IAAA,OAAA,EAAA,mBAAA;AACA,UAAA,MAAA,GAAA,KAAA,YAAA;AACA,UAAA,GAAA,GAAA,IAAA,CAAA,IAAA,CAAA,MAAA,GAAA,IAAA,GAAA,EAAA,CAAA;AACA,aAAA,GAAA,IAAA,EAAA,GAAA,GAAA,GAAA,MAAA,GAAA;AACA,KAxBA;AAyBA,IAAA,EAAA,EAAA,cAAA;AACA,aAAA,KAAA,YAAA,CAAA,QAAA,GAAA,MAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA;AACA;AA3BA,GAnCA;AAiEA,EAAA,OAAA,EAAA;AACA,IAAA,qBAAA,EAAA,iCAAA;AACA,WAAA,KAAA;AACA,MAAA,QAAA,CAAA,KAAA,CAAA,uBAAA,EAAA,IAAA;AACA,MAAA,QAAA,CAAA,KAAA,CAAA,mBAAA,EAAA,KAAA,YAAA;AACA,MAAA,QAAA,CAAA,KAAA,CAAA,SAAA,EAAA;AAAA,QAAA,OAAA,EAAA,eAAA;AAAA,QAAA,mBAAA,EAAA;AAAA,OAAA;AACA,KANA;AAOA,IAAA,oBAAA,EAAA,gCAAA;AACA,WAAA,KAAA;AACA,WAAA,KAAA,CAAA,cAAA,IAAA,CAAA;AACA,MAAA,QAAA,CAAA,KAAA,CAAA,uBAAA,EAAA,KAAA;AACA,MAAA,QAAA,CAAA,KAAA,CAAA,SAAA,EAAA,aAAA;AACA,MAAA,QAAA,CAAA,KAAA,CAAA,uBAAA,EAAA,KAAA;AACA,KAbA;AAcA,IAAA,aAAA,EAAA,yBAAA;AACA,MAAA,QAAA,CAAA,KAAA,CAAA,SAAA,EAAA;AAAA,QAAA,OAAA,EAAA,KAAA,KAAA,CAAA,eAAA;AAAA,QAAA,mBAAA,EAAA,KAAA,KAAA,CAAA;AAAA,OAAA;AACA,WAAA,KAAA,CAAA,YAAA,GAAA,KAAA;AACA,WAAA,KAAA,CAAA,eAAA,GAAA,IAAA;AACA,WAAA,KAAA,CAAA,YAAA,GAAA,IAAA;AACA,KAnBA;AAoBA,IAAA,mBAAA,EAAA,+BAAA;AACA,UAAA,KAAA,KAAA,CAAA,cAAA,KAAA,QAAA,EAAA;AACA,aAAA,KAAA;AACA,aAAA,KAAA;AACA,QAAA,QAAA,CAAA,KAAA,CAAA,sBAAA,EAAA,KAAA,YAAA;AACA;;AACA,WAAA,KAAA,CAAA,mBAAA,GAAA,KAAA;AACA,WAAA,KAAA,CAAA,cAAA,GAAA,IAAA;AACA,MAAA,QAAA,CAAA,KAAA,CAAA,uBAAA,EAAA,KAAA;AACA,KA7BA;AA8BA,IAAA,aAAA,EAAA,yBAAA;AAAA;;AACA,WAAA,KAAA,CAAA,mBAAA,GAAA,IAAA;AACA,WAAA,SAAA,CAAA;AAAA,eAAA,MAAA,CAAA,KAAA,CAAA,cAAA,CAAA,KAAA,EAAA;AAAA,OAAA;AACA,KAjCA;AAmCA,IAAA,KAAA,EAAA,iBAAA;AACA,WAAA,KAAA,CAAA,KAAA,GAAA,SAAA;AACA,WAAA,KAAA,CAAA,SAAA,GAAA,WAAA;AACA,WAAA,KAAA,CAAA,WAAA,GAAA,WAAA;AACA,KAvCA;AAwCA,IAAA,KAAA,EAAA,iBAAA;AACA,WAAA,KAAA,CAAA,KAAA,GAAA,QAAA;AACA,KA1CA;AA2CA,IAAA,MAAA,EAAA,kBAAA;AACA,WAAA,KAAA,CAAA,KAAA,GAAA,SAAA;AACA,KA7CA;AA8CA,IAAA,iBAAA,EAAA,6BAAA;AACA,UAAA,KAAA,KAAA,CAAA,KAAA,KAAA,SAAA,EAAA;AACA,aAAA,WAAA,GAAA,WAAA;AACA,QAAA,QAAA,CAAA,KAAA,CAAA,mBAAA,EAAA,KAAA,IAAA;AACA;AACA,KAnDA;AAoDA,IAAA,cAAA,EAAA,0BAAA;AACA,WAAA,KAAA;AACA,WAAA,KAAA,CAAA,YAAA,GAAA,IAAA;AACA,MAAA,QAAA,CAAA,KAAA,CAAA,SAAA,EAAA,6BAAA,KAAA,KAAA,CAAA,YAAA;AACA,WAAA,KAAA;AACA,KAzDA;AA0DA,IAAA,eAAA,EAAA,2BAAA;AACA,WAAA,KAAA,CAAA,YAAA,GAAA,KAAA;AACA,MAAA,QAAA,CAAA,KAAA,CAAA,SAAA,EAAA,gCAAA,KAAA,KAAA,CAAA,YAAA;AACA,MAAA,QAAA,CAAA,KAAA,CAAA,mBAAA,EAAA,IAAA;AACA,WAAA,KAAA;AACA,KA/DA;AAgEA,IAAA,QAAA,EAAA,oBAAA;AACA,MAAA,QAAA,CAAA,KAAA,CAAA,SAAA,EAAA,MAAA;AACA,KAlEA;AAmEA,IAAA,SAAA,EAAA,qBAAA;AACA,WAAA,KAAA,CAAA,SAAA,GAAA,IAAA;AACA,WAAA,KAAA,CAAA,KAAA,GAAA,QAAA;AACA,WAAA,KAAA,CAAA,UAAA,GAAA,WAAA;AACA,MAAA,QAAA,CAAA,KAAA,CAAA,SAAA,EAAA,eAAA;AACA,KAxEA;AAyEA,IAAA,QAAA,EAAA,oBAAA;AACA,WAAA,KAAA,CAAA,SAAA,GAAA,KAAA;AACA,MAAA,QAAA,CAAA,KAAA,CAAA,SAAA,EAAA,gBAAA;AACA,WAAA,KAAA,CAAA,SAAA,IAAA,cAAA,KAAA,KAAA,CAAA,UAAA;AACA,WAAA,KAAA,CAAA,KAAA,GAAA,SAAA;AACA,KA9EA;AA+EA,IAAA,aAAA,EAAA,yBAAA;AAAA;;AACA,WAAA,KAAA,CAAA,YAAA,GAAA,KAAA,IAAA;AACA,WAAA,KAAA,CAAA,YAAA,GAAA,IAAA;AACA,WAAA,SAAA,CAAA;AAAA,eAAA,MAAA,CAAA,KAAA,CAAA,eAAA,CAAA,KAAA,EAAA;AAAA,OAAA;AACA,KAnFA;AAoFA,IAAA,UAAA,EAAA,sBAAA;AACA,MAAA,QAAA,CAAA,KAAA,CAAA,SAAA,EAAA;AAAA,QAAA,IAAA,EAAA,KAAA,KAAA,CAAA,eAAA;AAAA,QAAA,YAAA,EAAA,KAAA,KAAA,CAAA;AAAA,OAAA;AACA,WAAA,KAAA,CAAA,YAAA,GAAA,KAAA;AACA,WAAA,KAAA,CAAA,eAAA,GAAA,IAAA;AACA,WAAA,KAAA,CAAA,YAAA,GAAA,IAAA;AACA;AAzFA;AAjEA,CAAA","sourcesContent":["<template>\n    <div class=\"container\">\n        <div style=\"margin-top: 4em\"></div>\n        \n        <!-- Episode Record Start / Stop Buttons -->\n        <div class=\"container has-text-centered\" style=\"margin-bottom: 2em\">\n            <button class=\"button is-medium is-link\"                     v-if=\"! is_recording\" :disabled=\"! is_global_timer_running\" v-on:click=\"startEpisodeRecording()\">Record Episode</button>\n            <button class=\"button is-medium is-danger has-text-centered\" v-if=\"is_recording\"   :disabled=\"is_paused\"                 v-on:click=\"stopEpisodeRecording()\" >Complete Episode</button>\n        </div>\n\n        <!-- Timer Display -->\n        <div class=\"container has-text-centered\" style=\"margin-bottom: 2em\">\n            <span class=\"is-size-1\" id=\"time\" v-html=\"time\"></span>\n        </div>\n        \n        <!-- Control Buttons For Episode Timer -->\n        <div class=\"container has-text-centered\" style=\"margin-bottom: 2em\">\n            <button class=\"button ctl-btn is-medium is-info\"    v-on:click=\"sendFlag()\"      :disabled=\"is_paused || ! is_recording\" ><i class=\"fas fa-flag\"></i></button>\n            <button class=\"button ctl-btn is-medium is-info\"    v-on:click=\"promptComment()\" :disabled=\"is_paused || ! is_recording\" ><i class=\"fas fa-comment\"></i></button>\n\n            <button class=\"button ctl-btn is-medium is-info\"    v-on:click=\"sendPause()\"     :disabled=\"! is_recording\"  v-if=\"! is_paused\" ><i class=\"fas fa-pause\"></i></button>\n            <button class=\"button ctl-btn is-medium is-warning\" v-on:click=\"sendPlay()\"                                  v-if=\"is_paused\"   ><i class=\"fas fa-play\"></i></button>\n\n            <button class=\"button ctl-btn is-medium is-danger\" v-on:click=\"removeEpisode()\"  :disabled=\"! is_recording || is_paused\"><i class=\"fas fa-ban\"></i></button>\n        </div>\n\n        <!-- Comment Section -->\n        <div class=\"container\" v-if=\"want_comment\" style=\"margin-bottom: 2em\">\n            <input type=\"text\" ref='comment_content' v-model=\"comment_content\" autofocus=true class=\"input\" placeholder=\"Enter Comment\" v-on:keyup.enter=\"submitComment()\" />\n        </div>\n        \n        <!-- Delete Confirmation -->\n        <div class=\"container\" v-if=\"want_delete_episode\" style=\"margin-bottom: 2em\">\n            <input type=\"text\" ref='delete_episode' v-model=\"delete_episode\" autofocus=true class=\"input\" placeholder=\"Type 'delete' to confirm episode deletion\" v-on:keyup.enter=\"submitEpisodeDelete()\" />\n        </div>\n        \n    </div>\n</template>\n\n<style>\n    .ctl-btn {\n        margin-right: 0.5em;\n        margin-left: 0.5em;\n    }\n    \n</style>\n\n<script>\n    \n    import { EventBus } from './EventBus.js';\n\n    export default {\n        data: function() {\n            return {\n                state: \"paused\",\n                startTime: Date.now(),\n                currentTime: Date.now(),\n                interval: null,\n                is_paused: false,\n                is_recording: false,\n                episode_number: 1,\n                want_delete_episode: false,\n                want_comment: false,\n                comment_time: null,\n                comment_content: null,\n                delete_episode: null,\n                is_global_timer_running: false,\n                pause_time: null\n            }\n        },\n        mounted: function() {\n\n            this.interval = setInterval(this.updateCurrentTime, 1000);\n            \n            EventBus.$on('GlobalSessionRecordingState', value => {\n                this.$data.is_global_timer_running = value;\n            });\n\n            EventBus.$on('EpisodeRecordingState', value => {\n                this.$data.is_recording = value;\n            });\n\n        },\n        destroyed: function() {\n            clearInterval(this.interval)\n        },\n        computed: {\n            episode_name: function () {\n                return 'Episode ' + ( this.$data.episode_number >= 10 ? this.$data.episode_number : '0' + this.$data.episode_number.toString() );\n            },\n            time: function() {\n                return this.hours + ':' + this.minutes + ':' + this.seconds;\n            },\n            milliseconds: function() {\n                return this.currentTime - this.$data.startTime;\n            },\n            hours: function() {\n                var lapsed = this.milliseconds;\n                var hrs = Math.floor((lapsed / 1000 / 60 / 60));\n                return hrs >= 10 ? hrs : '0' + hrs;\n            },\n            minutes: function() {\n                var lapsed = this.milliseconds;\n                var min = Math.floor((lapsed / 1000 / 60) % 60);\n                return min >= 10 ? min : '0' + min;\n            },\n            seconds: function() {\n                var lapsed = this.milliseconds;\n                var sec = Math.ceil((lapsed / 1000) % 60);\n                return sec >= 10 ? sec : '0' + sec;\n            },\n            ms: function() {\n                return this.milliseconds.toString().substr(-3,1);\n            }\n            \n        },\n        methods: {\n            startEpisodeRecording: function () {\n                this.reset();\n                EventBus.$emit('EpisodeRecordingState', true );\n                EventBus.$emit('episodeNameChange', this.episode_name);\n                EventBus.$emit('addNote', { content: 'BEGIN EPISODE', episodeSessionTimer: '00:00:00' } );\n            },\n            stopEpisodeRecording: function() {\n                this.pause();\n                this.$data.episode_number += 1;\n                EventBus.$emit('EpisodeRecordingState', false );\n                EventBus.$emit('addNote', 'END EPISODE' );\n                EventBus.$emit('EpisodeRecordingState', false );\n            },\n            submitComment: function () {\n                EventBus.$emit('addNote', { content: this.$data.comment_content, episodeSessionTimer: this.$data.comment_time } );\n                this.$data.want_comment = false;\n                this.$data.comment_content = null;\n                this.$data.comment_time = null;\n            },\n            submitEpisodeDelete: function () {\n                if ( this.$data.delete_episode === 'delete' ) {\n                    this.reset();\n                    this.pause();\n                    EventBus.$emit('deleteEpisodeFromLog', this.episode_name );\n                } \n                this.$data.want_delete_episode = false;\n                this.$data.delete_episode = null;\n                EventBus.$emit('EpisodeRecordingState', false );\n            },\n            removeEpisode: function () {\n                this.$data.want_delete_episode = true;\n                this.$nextTick( () => this.$refs.delete_episode.focus() );\n            },\n            \n            reset: function() {\n                this.$data.state = \"started\";\n                this.$data.startTime = Date.now();\n                this.$data.currentTime = Date.now();\n            },\n            pause: function() {\n                this.$data.state = \"paused\";\n            },\n            resume: function() {\n                this.$data.state = \"started\";\n            },\n            updateCurrentTime: function() {\n                if (this.$data.state === \"started\") {\n                    this.currentTime = Date.now();\n                    EventBus.$emit('episodeTimeChange', this.time );\n                }\n            },\n            beginRecording: function() {\n                this.reset();\n                this.$data.is_recording = true;\n                EventBus.$emit('addNote', 'Began recording episode ' + this.$data.episode_name );\n                this.reset();\n            },\n            finishRecording: function() {\n                this.$data.is_recording = false;\n                EventBus.$emit('addNote', 'Finished recording episode ' + this.$data.episode_name );\n                EventBus.$emit('episodeTimeChange', null );\n                this.pause();\n            },\n            sendFlag: function() {\n                EventBus.$emit('addNote', \"FLAG\" );\n            },\n            sendPause: function() {\n                this.$data.is_paused = true;\n                this.$data.state = \"paused\";\n                this.$data.pause_time = Date.now();\n                EventBus.$emit('addNote', 'PAUSE EPISODE' );\n            },\n            sendPlay: function() {\n                this.$data.is_paused = false;\n                EventBus.$emit('addNote', 'RESUME EPISODE' );\n                this.$data.startTime += ( Date.now() - this.$data.pause_time );\n                this.$data.state = \"started\";\n            },\n            promptComment: function() {\n                this.$data.comment_time = this.time;\n                this.$data.want_comment = true;\n                this.$nextTick( () => this.$refs.comment_content.focus() );\n            },\n            setComment: function() {\n                EventBus.$emit('addNote', { note: this.$data.comment_content, episode_time: this.$data.comment_time } );\n                this.$data.want_comment = false;\n                this.$data.comment_content = null;\n                this.$data.comment_time = null;\n            }\n        }\n    } \n</script>\n"],"sourceRoot":"src/components"}]}