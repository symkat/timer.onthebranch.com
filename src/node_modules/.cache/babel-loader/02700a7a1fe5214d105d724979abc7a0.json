{"remainingRequest":"/home/node/src/node_modules/babel-loader/lib/index.js!/home/node/src/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/node/src/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/node/src/src/components/StopWatch.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/node/src/src/components/StopWatch.vue","mtime":1553218627000},{"path":"/home/node/src/node_modules/cache-loader/dist/cjs.js","mtime":1552946782000},{"path":"/home/node/src/node_modules/babel-loader/lib/index.js","mtime":1552946771000},{"path":"/home/node/src/node_modules/cache-loader/dist/cjs.js","mtime":1552946782000},{"path":"/home/node/src/node_modules/vue-loader/lib/index.js","mtime":1552946783000}],"contextDependencies":[],"result":["import _Date$now from \"/home/node/src/node_modules/@babel/runtime-corejs2/core-js/date/now\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { EventBus } from './EventBus.js';\nexport default {\n  data: function data() {\n    return {\n      state: \"paused\",\n      startTime: _Date$now(),\n      currentTime: _Date$now(),\n      interval: null,\n      is_episode_timer_running: false\n    };\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    this.interval = setInterval(this.updateCurrentTime, 100);\n    EventBus.$on('EpisodeRecordingState', function (value) {\n      _this.$data.is_episode_timer_running = value;\n    });\n  },\n  destroyed: function destroyed() {\n    clearInterval(this.interval);\n  },\n  computed: {\n    time: function time() {\n      return this.hours + ':' + this.minutes + ':' + this.seconds;\n    },\n    milliseconds: function milliseconds() {\n      return this.currentTime - this.$data.startTime;\n    },\n    hours: function hours() {\n      var lapsed = this.milliseconds;\n      var hrs = Math.floor(lapsed / 1000 / 60 / 60);\n      return hrs >= 10 ? hrs : '0' + hrs;\n    },\n    minutes: function minutes() {\n      var lapsed = this.milliseconds;\n      var min = Math.floor(lapsed / 1000 / 60 % 60);\n      return min >= 10 ? min : '0' + min;\n    },\n    seconds: function seconds() {\n      var lapsed = this.milliseconds;\n      var sec = Math.ceil(lapsed / 1000 % 60);\n      return sec >= 10 ? sec : '0' + sec;\n    }\n  },\n  methods: {\n    startGlobalSession: function startGlobalSession() {\n      this.reset();\n      EventBus.$emit('addNote', 'Global Session Has Started');\n      EventBus.$emit('GlobalSessionRecordingState', true);\n    },\n    stopGlobalSession: function stopGlobalSession() {\n      this.pause();\n      EventBus.$emit('addNote', 'Global Session Has Stopped');\n      EventBus.$emit('GlobalSessionRecordingState', false);\n    },\n    reset: function reset() {\n      this.$data.state = \"started\";\n      this.$data.startTime = _Date$now();\n      this.$data.currentTime = _Date$now();\n    },\n    pause: function pause() {\n      this.$data.state = \"paused\";\n    },\n    resume: function resume() {\n      this.$data.state = \"started\";\n    },\n    updateCurrentTime: function updateCurrentTime() {\n      if (this.$data.state == \"started\") {\n        this.currentTime = _Date$now();\n        EventBus.$emit('globalTimeChange', this.time);\n      }\n    }\n  }\n};",{"version":3,"sources":["StopWatch.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <div class=\"container level\">\n        <div class=\"level-item\">\n            <button v-if=\"$data.state === 'paused'\"  class=\"button is-large is-link\" v-on:click=\"startGlobalSession()\">Begin Recording Session</button>\n            <button v-if=\"$data.state === 'started'\" :disabled=\"is_episode_timer_running\" class=\"button is-large is-danger\" v-on:click=\"stopGlobalSession()\">Stop Recording Session</button>\n        </div>\n        <div class=\"level-item\">\n            <h1 class=\"title is-size-1\">Happy Birthday!</h1>\n        </div>\n        <div class=\"level-item\">\n            <span class=\"is-size-1\" id=\"time\" v-html=\"time\"></span>\n        </div>\n    </div>\n</template>\n\n<style>\n    \n</style>\n\n<script>\n    \n    import { EventBus } from './EventBus.js';\n\n    export default {\n        data: function() {\n            return {\n                state: \"paused\",\n                startTime: Date.now(),\n                currentTime: Date.now(),\n                interval: null,\n                is_episode_timer_running: false\n            }\n        },\n        mounted: function() {\n            this.interval = setInterval(this.updateCurrentTime, 100);\n            EventBus.$on('EpisodeRecordingState', value => {\n                this.$data.is_episode_timer_running = value;\n            });\n        },\n        destroyed: function() {\n            clearInterval(this.interval)\n        },\n        computed: {\n            time: function() {\n                return this.hours + ':' + this.minutes + ':' + this.seconds;\n            },\n            milliseconds: function() {\n                return this.currentTime - this.$data.startTime;\n            },\n            hours: function() {\n                var lapsed = this.milliseconds;\n                var hrs = Math.floor((lapsed / 1000 / 60 / 60));\n                return hrs >= 10 ? hrs : '0' + hrs;\n            },\n            minutes: function() {\n                var lapsed = this.milliseconds;\n                var min = Math.floor((lapsed / 1000 / 60) % 60);\n                return min >= 10 ? min : '0' + min;\n            },\n            seconds: function() {\n                var lapsed = this.milliseconds;\n                var sec = Math.ceil((lapsed / 1000) % 60);\n                return sec >= 10 ? sec : '0' + sec;\n            }\n        },\n        methods: {\n            startGlobalSession: function () {\n                this.reset();\n                EventBus.$emit('addNote', 'Global Session Has Started' );\n                EventBus.$emit('GlobalSessionRecordingState', true );\n            },\n            stopGlobalSession: function () {\n                this.pause();\n                EventBus.$emit('addNote', 'Global Session Has Stopped' );\n                EventBus.$emit('GlobalSessionRecordingState', false );\n            },\n            reset: function() {\n                this.$data.state = \"started\";\n                this.$data.startTime = Date.now();\n                this.$data.currentTime = Date.now();\n            },\n            pause: function() {\n                this.$data.state = \"paused\";\n            },\n            resume: function() {\n                this.$data.state = \"started\";\n            },\n            updateCurrentTime: function() {\n                if (this.$data.state == \"started\") {\n                    this.currentTime = Date.now();\n                    EventBus.$emit('globalTimeChange', this.time );\n                }\n            }\n        }\n    } \n</script>\n"],"sourceRoot":"src/components"}]}