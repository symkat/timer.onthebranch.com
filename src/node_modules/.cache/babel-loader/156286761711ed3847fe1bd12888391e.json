{"remainingRequest":"/home/node/src/vue-skills/node_modules/thread-loader/dist/cjs.js!/home/node/src/vue-skills/node_modules/babel-loader/lib/index.js!/home/node/src/vue-skills/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/node/src/vue-skills/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/node/src/vue-skills/src/components/NoteLogger.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/node/src/vue-skills/src/components/NoteLogger.vue","mtime":1553217080000},{"path":"/home/node/src/vue-skills/node_modules/cache-loader/dist/cjs.js","mtime":1552946782000},{"path":"/home/node/src/vue-skills/node_modules/thread-loader/dist/cjs.js","mtime":1552946783000},{"path":"/home/node/src/vue-skills/node_modules/babel-loader/lib/index.js","mtime":1552946771000},{"path":"/home/node/src/vue-skills/node_modules/cache-loader/dist/cjs.js","mtime":1552946782000},{"path":"/home/node/src/vue-skills/node_modules/vue-loader/lib/index.js","mtime":1552946783000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { EventBus } from './EventBus.js';\nexport default {\n  name: 'NoteLogger',\n  mounted: function mounted() {\n    var _this = this;\n\n    EventBus.$on('addNote', function (note) {\n      _this.addNote(note);\n    });\n    EventBus.$on('deleteEpisodeFromLog', function (episode_name) {\n      _this.deleteEpisodeFromLog(episode_name);\n    });\n    EventBus.$on('globalTimeChange', function (time) {\n      _this.$data.currentGlobalSessionTimer = time;\n    });\n    EventBus.$on('episodeTimeChange', function (time) {\n      _this.$data.currentEpisodeSessionTimer = time;\n    });\n    EventBus.$on('episodeNameChange', function (name) {\n      _this.$data.currentEpisodeName = name;\n    });\n  },\n  data: function data() {\n    return {\n      items: [{\n        date: this.getDate(),\n        note: 'Log Started'\n      }],\n      currentGlobalSessionTimer: false,\n      currentEpisodeName: null\n    };\n  },\n  methods: {\n    addNote: function addNote(note) {\n      var index = 1;\n\n      if (this.$data.items.length >= 1) {\n        index = this.$data.items[this.$data.items.length - 1].index;\n      }\n\n      if (typeof note === 'string') {\n        this.$data.items.push({\n          index: index,\n          episode: this.$data.currentEpisodeName,\n          date: this.getDate(),\n          globalSessionTimer: this.$data.currentGlobalSessionTimer,\n          episodeSessionTimer: this.$data.currentEpisodeSessionTimer,\n          note: note\n        });\n      } else {\n        this.$data.items.push({\n          index: index,\n          date: this.getDate(),\n          episode: this.$data.currentEpisodeName,\n          globalSessionTimer: this.$data.currentGlobalSessionTimer,\n          episodeSessionTimer: note.episodeSessionTimer ? note.episodeSessionTimer : this.$data.currentEpisodeSessionTimer,\n          note: note.content\n        });\n      }\n    },\n    deleteEpisodeFromLog: function deleteEpisodeFromLog(episode_name) {\n      for (var i = this.$data.items.length - 1; i >= 0; i--) {\n        if (this.$data.items[i].episode === episode_name) {\n          this.$data.items.splice(i, 1);\n        }\n      }\n    },\n    getDate: function getDate() {\n      var dateObj = new Date();\n      return ('0' + (dateObj.getMonth() + 1)).slice(-2) + \"/\" + ('0' + dateObj.getDate()).slice(-2) + \"/\" + (dateObj.getYear() + 1900) + \" \" + ('0' + dateObj.getHours()).slice(-2) + \":\" + ('0' + dateObj.getMinutes()).slice(-2) + \":\" + ('0' + dateObj.getSeconds()).slice(-2) + \".\" + ('00' + dateObj.getMilliseconds()).slice(-3);\n    }\n  }\n};",{"version":3,"sources":["NoteLogger.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <div class=\"container\">\n        <div class=\"box is-family-monospace\">\n            <ul>\n                <li v-bind:key=item.index v-for=\"item in items\"> {{item.date }} {{ item.globalSessionTimer || 'xx:xx:xx' }} {{ item.episodeSessionTimer || 'xx.xx.xx' }} {{ item.episode || 'Episode --' }} : {{ item.note }}</li>\n            </ul>\n        </div>\n    </div>\n</template>\n\n<script>\n    import { EventBus } from './EventBus.js';\n\n    export default {\n        name: 'NoteLogger',\n        mounted: function() {\n            EventBus.$on('addNote', note => {\n                this.addNote(note);\n            });\n            EventBus.$on('deleteEpisodeFromLog', episode_name => {\n                this.deleteEpisodeFromLog( episode_name );\n            });\n            EventBus.$on('globalTimeChange', time => {\n                this.$data.currentGlobalSessionTimer = time;\n            });\n            EventBus.$on('episodeTimeChange', time => {\n                this.$data.currentEpisodeSessionTimer = time;\n            });\n            EventBus.$on('episodeNameChange', name => {\n                this.$data.currentEpisodeName = name;\n            });\n        },\n        data: function() {\n            return {\n                items: [ { date: this.getDate(), note : 'Log Started' } ],\n                currentGlobalSessionTimer: false,\n                currentEpisodeName: null,\n            }\n        },\n        methods: {\n            addNote: function(note) {\n                var index = 1;\n                if ( this.$data.items.length >= 1 ) {\n                    index = this.$data.items[this.$data.items.length - 1].index;\n                }\n\n                if ( typeof(note) === 'string' ) {\n                    this.$data.items.push({ \n                        index:               index,\n                        episode:             this.$data.currentEpisodeName,\n                        date:                this.getDate(), \n                        globalSessionTimer:  this.$data.currentGlobalSessionTimer, \n                        episodeSessionTimer: this.$data.currentEpisodeSessionTimer, \n                        note:                note \n                    });\n                } else {\n                    this.$data.items.push({ \n                        index:               index,\n                        date:                this.getDate(), \n                        episode:             this.$data.currentEpisodeName,\n                        globalSessionTimer:  this.$data.currentGlobalSessionTimer, \n                        episodeSessionTimer: note.episodeSessionTimer ? note.episodeSessionTimer : this.$data.currentEpisodeSessionTimer, \n                        note:                note.content\n                    });\n                }\n            },\n            deleteEpisodeFromLog: function (episode_name) {\n                for (var i = this.$data.items.length - 1; i >= 0 ; i-- ) {\n                    if ( this.$data.items[i].episode === episode_name ) {\n                        this.$data.items.splice(i, 1);\n                    }\n                }\n            },\n            getDate: function () {\n                var dateObj = new Date;\n                return (\n                    ( '0' + (dateObj.getMonth() + 1) ).slice(-2)) + \"/\" + \n                    ( '0' + dateObj.getDate()).slice(-2)          + \"/\" +  \n                    ( dateObj.getYear() + 1900 )                  + \" \" + \n                    ( '0' + dateObj.getHours()).slice(-2)         + \":\" + \n                    ( '0' + dateObj.getMinutes()).slice(-2)       + \":\" + \n                    ( '0' + dateObj.getSeconds()).slice(-2)       + \".\" + \n                    ( '00' + dateObj.getMilliseconds()).slice(-3)\n            }\n        }\n    }\n</script>\n\n<style>\n</style>\n"],"sourceRoot":"src/components"}]}